/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. .\src\main\java\org\dhbw\ka\ml\generated\Petri.jj */
/*@egen*/options {
                 
    STATIC = false;
                   
}

PARSER_BEGIN(Petri)
package org.dhbw.ka.ml.generated;

public class Petri/*@bgen(jjtree)*/implements PetriTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTPetriState jjtree = new JJTPetriState();

/*@egen*/
}
PARSER_END(Petri)

SKIP : {
    " "
|   "\r"
|   "\t"
|   "\n"
}

SPECIAL_TOKEN : {
    < ONE_LINE_COMMENT: "#" (~["\n"])* "\n" >
}

TOKEN : {
    < STRUCT: "struct" >
|   < BOOL: "bool" >
|   < INT32: "int32" >
|   < INT64: "int64" >
|   < FLOAT32: "float32" >
|   < FLOAT64: "float64" >
|   < STRING: "string" >
|   < DELETED: "@deleted" >
}

TOKEN : {
    < #DIGIT: ["0"-"9"] >
|   < DIGITS: (<DIGIT>)+ >
|   < #LETTER: ["a"-"z","A"-"Z"] >
|   < #ID_ANY: (<DIGIT>|<LETTER>|"_") >
|   < ID: (("_")+ (<DIGIT>|<LETTER>) (<ID_ANY>)* | <DIGITS> (<LETTER>|"_") (<ID_ANY>)* | <LETTER> (<ID_ANY>)*) >
}

ASTroot root() :
{/*@bgen(jjtree) root */
  ASTroot jjtn000 = new ASTroot(JJTROOT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) root */
    try {
/*@egen*//*@bgen(jjtree) ComplexTypes */
    {
      ASTComplexTypes jjtn001 = new ASTComplexTypes(JJTCOMPLEXTYPES);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/
    (complex_type())*/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
    }
/*@egen*/               <EOF>/*@bgen(jjtree)*/
                                          {
                                            jjtree.closeNodeScope(jjtn000, true);
                                            jjtc000 = false;
                                          }
/*@egen*/ { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void complex_type()       :
{}
{
    struct()
}

void struct():
{/*@bgen(jjtree) struct */
    ASTstruct jjtn000 = new ASTstruct(JJTSTRUCT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    ASTIdentifier ident;
    ASTIdentifier parent = null;
}
{/*@bgen(jjtree) struct */
    try {
/*@egen*/
    <STRUCT> ident=identifier(false) ((":" parent=identifier(false))?) "{"/*@bgen(jjtree) fields */
                                                                           {
                                                                             ASTfields jjtn001 = new ASTfields(JJTFIELDS);
                                                                             boolean jjtc001 = true;
                                                                             jjtree.openNodeScope(jjtn001);
                                                                           }
                                                                           try {
/*@egen*/ ((field())*)/*@bgen(jjtree)*/
                                                                           } catch (Throwable jjte001) {
                                                                             if (jjtc001) {
                                                                               jjtree.clearNodeScope(jjtn001);
                                                                               jjtc001 = false;
                                                                             } else {
                                                                               jjtree.popNode();
                                                                             }
                                                                             if (jjte001 instanceof RuntimeException) {
                                                                               throw (RuntimeException)jjte001;
                                                                             }
                                                                             if (jjte001 instanceof ParseException) {
                                                                               throw (ParseException)jjte001;
                                                                             }
                                                                             throw (Error)jjte001;
                                                                           } finally {
                                                                             if (jjtc001) {
                                                                               jjtree.closeNodeScope(jjtn001, true);
                                                                             }
                                                                           }
/*@egen*/         "}"/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.setIdent(ident);
        jjtn000.setParent(parent);
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void field():
{/*@bgen(jjtree) field */
    ASTfield jjtn000 = new ASTfield(JJTFIELD);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t = null;
    SimpleNode type;
    ASTIdentifier ident;
}
{/*@bgen(jjtree) field */
    try {
/*@egen*/
    (t=field_annotation())? type=type_identifier() ident=identifier(false) ";"/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.setDeleted(t != null);
        jjtn000.setType(type);
        jjtn000.setIdent(ident);
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

SimpleNode type_identifier()       :
{
    SimpleNode t;
}
{
    (
    t=primitive_type()
    |
    t=identifier(false)
    ) { return t; }
    // | <LIST> "<" type_identifier() ">"
}

Token field_annotation()       :
{
    Token t;
}
{
    (t=<DELETED>) { return t; }
}

ASTPrimitiveType primitive_type()                :
{/*@bgen(jjtree) PrimitiveType */
    ASTPrimitiveType jjtn000 = new ASTPrimitiveType(JJTPRIMITIVETYPE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) PrimitiveType */
    try {
/*@egen*/
    (
    t=<BOOL>
    |
    t=<INT32>
    |
    t=<INT64>
    |
    t=<FLOAT32>
    |
    t=<FLOAT64>
    |
    t=<STRING>
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.setType(t.image);
        jjtn000.setBeginColumn(t.beginColumn);
        jjtn000.setBeginLine(t.beginLine);
        return jjtn000;
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

ASTIdentifier identifier(boolean b)                :
{/*@bgen(jjtree) #Identifier( b) */
    ASTIdentifier jjtn000 = new ASTIdentifier(JJTIDENTIFIER);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) #Identifier( b) */
    try {
/*@egen*/
    (t=<ID>)/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000,  b);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.setIdent(t.image);
        jjtn000.setBeginColumn(t.beginColumn);
        jjtn000.setBeginLine(t.beginLine);
        return jjtn000;
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000,  b);
      }
    }
/*@egen*/
}