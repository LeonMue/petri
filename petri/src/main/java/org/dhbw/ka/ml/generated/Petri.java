/* Generated By:JJTree&JavaCC: Do not edit this line. Petri.java */
package org.dhbw.ka.ml.generated;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.nio.file.Paths;

import org.dhbw.ka.ml.visitor.JavaGenVisitor;
import org.dhbw.ka.ml.visitor.fieldnumber.FieldNumberModifierVisitor;
import org.dhbw.ka.ml.visitor.scopeduplications.ScopeDuplicationVisitor;
public class Petri/*@bgen(jjtree)*/implements PetriTreeConstants, PetriConstants {/*@bgen(jjtree)*/
  protected JJTPetriState jjtree = new JJTPetriState();public static void main(String[] args) throws ParseException, IOException {
        var path = Paths.get("src", "test", "resources", "semantic", "valid", "valid.petri");
        var parser = new Petri(new BufferedReader(new FileReader(path.toFile())));
        try {
            var node = parser.root();
            // node.dump("");
            node.jjtAccept(new ScopeDuplicationVisitor(), null);
            node.jjtAccept(new FieldNumberModifierVisitor(), null);
            node.jjtAccept(new JavaGenVisitor(
                    Paths.get("src", "main", "java"),
                    "org.dhbw.ka.ml.generated",
                    Paths.get("org", "dhbw", "ka", "ml", "generated")
            ), null);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

  final public ASTroot root() throws ParseException {
 /*@bgen(jjtree) root */
  ASTroot jjtn000 = new ASTroot(JJTROOT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ASTComplexTypes jjtn001 = new ASTComplexTypes(JJTCOMPLEXTYPES);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      try {
        label_1:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case MESSAGE:
            ;
            break;
          default:
            jj_la1[0] = jj_gen;
            break label_1;
          }
          complex_type();
        }
      } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte001;}
      }
      if (jjte001 instanceof ParseException) {
        {if (true) throw (ParseException)jjte001;}
      }
      {if (true) throw (Error)jjte001;}
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
      }
      jj_consume_token(0);
                                            jjtree.closeNodeScope(jjtn000, true);
                                            jjtc000 = false;
                                            {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public void complex_type() throws ParseException {
    message();
  }

  final public void message() throws ParseException {
 /*@bgen(jjtree) message */
    ASTmessage jjtn000 = new ASTmessage(JJTMESSAGE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);String message_ident;
    String parent_ident = null;
    try {
      jj_consume_token(MESSAGE);
      message_ident = identifier();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 18:
        jj_consume_token(18);
        parent_ident = identifier();
        break;
      default:
        jj_la1[1] = jj_gen;
        ;
      }
      jj_consume_token(19);
                                                                                ASTfields jjtn001 = new ASTfields(JJTFIELDS);
                                                                                boolean jjtc001 = true;
                                                                                jjtree.openNodeScope(jjtn001);
      try {
        label_2:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case BOOL:
          case INT:
          case FLOAT:
          case DOUBLE:
          case STRING:
            ;
            break;
          default:
            jj_la1[2] = jj_gen;
            break label_2;
          }
          field();
        }
      } catch (Throwable jjte001) {
                                                                                if (jjtc001) {
                                                                                  jjtree.clearNodeScope(jjtn001);
                                                                                  jjtc001 = false;
                                                                                } else {
                                                                                  jjtree.popNode();
                                                                                }
                                                                                if (jjte001 instanceof RuntimeException) {
                                                                                  {if (true) throw (RuntimeException)jjte001;}
                                                                                }
                                                                                if (jjte001 instanceof ParseException) {
                                                                                  {if (true) throw (ParseException)jjte001;}
                                                                                }
                                                                                {if (true) throw (Error)jjte001;}
      } finally {
                                                                                if (jjtc001) {
                                                                                  jjtree.closeNodeScope(jjtn001, true);
                                                                                }
      }
      jj_consume_token(20);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
        jjtn000.setIdent(message_ident); jjtn000.setParent(parent_ident);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void field() throws ParseException {
 /*@bgen(jjtree) field */
    ASTfield jjtn000 = new ASTfield(JJTFIELD);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);String type_ident;
    String field_ident;
    int field_number;
    try {
      type_ident = type_identifier();
      field_ident = identifier();
      jj_consume_token(21);
      field_number = field_number();
      jj_consume_token(22);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
        jjtn000.setTypeIdent(type_ident); jjtn000.setFieldIdent(field_ident); jjtn000.setFieldNumber(field_number);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public String type_identifier() throws ParseException {
    String i;
    i = primitive_type();
                         {if (true) return i;}
    throw new Error("Missing return statement in function");
  }

  final public String primitive_type() throws ParseException {
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOL:
      t = jj_consume_token(BOOL);
                      {if (true) return t.image;}
      break;
    case INT:
      t = jj_consume_token(INT);
                      {if (true) return t.image;}
      break;
    case FLOAT:
      t = jj_consume_token(FLOAT);
                      {if (true) return t.image;}
      break;
    case DOUBLE:
      t = jj_consume_token(DOUBLE);
                      {if (true) return t.image;}
      break;
    case STRING:
      t = jj_consume_token(STRING);
                      {if (true) return t.image;}
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String identifier() throws ParseException {
    Token t;
    t = jj_consume_token(ID);
               {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  final public int field_number() throws ParseException {
    Token t;
    t = jj_consume_token(DIGITS);
                 {if (true) return Integer.parseInt(t.image);}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public PetriTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[4];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x40,0x40000,0xf80,0xf80,};
   }

  /** Constructor with InputStream. */
  public Petri(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Petri(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new PetriTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Petri(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new PetriTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Petri(PetriTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(PetriTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List jj_expentries = new java.util.ArrayList();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[23];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 4; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 23; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
