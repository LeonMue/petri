options {
    MULTI = true;
    STATIC = false;
    VISITOR = true;
}

PARSER_BEGIN(Petri)
package org.dhbw.ka.ml.generated;

public class Petri {
}
PARSER_END(Petri)

SKIP : {
    " "
|   "\r"
|   "\t"
|   "\n"
}

SPECIAL_TOKEN : {
    < ONE_LINE_COMMENT: "#" (~["\n"])* "\n" >
}

TOKEN : {
    < MESSAGE: "message" >
|   < BOOL: "bool" >
|   < INT: "int" >
|   < FLOAT: "float" >
|   < DOUBLE: "double" >
|   < STRING: "string" >
|   < LIST: "List" >
}

TOKEN : {
    < #DIGIT: ["0"-"9"] >
|   < DIGITS: (<DIGIT>)+ >
|   < #LETTER: ["a"-"z","A"-"Z"] >
|   < #ID_ANY: (<DIGIT>|<LETTER>|"_") >
|   < ID: (("_")+ (<DIGIT>|<LETTER>) (<ID_ANY>)* | <DIGITS> (<LETTER>|"_") (<ID_ANY>)* | <LETTER> (<ID_ANY>)*) >
}

ASTroot root() :
{
}
{
    (complex_type())* #ComplexTypes <EOF> { return jjtThis; }
}

void complex_type() #void :
{}
{
    message()
}

void message():
{
    String message_ident;
    String parent_ident = null;
}
{
    <MESSAGE> message_ident=identifier() (":" parent_ident=identifier())? "{" (field())* #fields "}"
    {
        jjtThis.setIdent(message_ident); jjtThis.setParent(parent_ident);
    }
}

void field():
{
    String type_ident;
    String field_ident;
    int field_number;
}
{
    type_ident=type_identifier() field_ident=identifier() "=" field_number=field_number() ";"
    {
        jjtThis.setTypeIdent(type_ident); jjtThis.setFieldIdent(field_ident); jjtThis.setFieldNumber(field_number);
    }
}

String type_identifier() #void :
{
    String i;
}
{
    i=primitive_type() { return i; } // | <ID> | <LIST> "<" type_identifier() ">"
}

String primitive_type() #void :
{
    Token t;
}
{
    t=<BOOL>        { return t.image; }
    |
    t=<INT>         { return t.image; }
    |
    t=<FLOAT>       { return t.image; }
    |
    t=<DOUBLE>      { return t.image; }
    |
    t=<STRING>      { return t.image; }
}

String identifier() #void :
{
    Token t;
}
{
    (t=<ID>) { return t.image; }
}

int field_number() #void :
{
    Token t;
}
{
    t=<DIGITS> { return Integer.parseInt(t.image); }
}