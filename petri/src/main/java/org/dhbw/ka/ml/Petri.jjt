options {
    MULTI = true;
    STATIC = false;
    VISITOR = true;
}

PARSER_BEGIN(Petri)
package org.dhbw.ka.ml.generated;

public class Petri {
}
PARSER_END(Petri)

SKIP : {
    " "
|   "\r"
|   "\t"
|   "\n"
}

SPECIAL_TOKEN : {
    < ONE_LINE_COMMENT: "#" (~["\n"])* "\n" >
}

TOKEN : {
    < STRUCT: "struct" >
|   < BOOL: "bool" >
|   < INT32: "int32" >
|   < INT64: "int64" >
|   < FLOAT32: "float32" >
|   < FLOAT64: "float64" >
|   < STRING: "string" >
|   < DELETED: "@deleted" >
}

TOKEN : {
    < #DIGIT: ["0"-"9"] >
|   < DIGITS: (<DIGIT>)+ >
|   < #LETTER: ["a"-"z","A"-"Z"] >
|   < #ID_ANY: (<DIGIT>|<LETTER>|"_") >
|   < ID: (("_")+ (<DIGIT>|<LETTER>) (<ID_ANY>)* | <DIGITS> (<LETTER>|"_") (<ID_ANY>)* | <LETTER> (<ID_ANY>)*) >
}

ASTroot root() :
{
}
{
    (complex_type())* #ComplexTypes <EOF> { return jjtThis; }
}

void complex_type() #void :
{}
{
    struct()
}

void struct():
{
}
{
    <STRUCT> identifier() ((":" identifier())? #ParentIdentifier) "{" (field())* #fields "}"
}

void field():
{
    Token t = null;
}
{
    (t=field_annotation())? type_identifier() identifier() ";" { jjtThis.setDeleted(t != null); }
}

void type_identifier() #void :
{}
{
    primitive_type() // | <ID> | <LIST> "<" type_identifier() ">"
}

Token field_annotation() #void :
{
    Token t;
}
{
    (t=<DELETED>) { return t; }
}

void primitive_type() #PrimitiveType :
{
    Token t;
}
{
    (t=<BOOL>
    |
    t=<INT32>
    |
    t=<INT64>
    |
    t=<FLOAT32>
    |
    t=<FLOAT64>
    |
    t=<STRING>) { jjtThis.setType(t.image); jjtThis.setBeginColumn(t.beginColumn); jjtThis.setBeginLine(t.beginLine); }
}

void identifier() #Identifier :
{
    Token t;
}
{
    (t=<ID>) { jjtThis.setIdent(t.image); jjtThis.setBeginColumn(t.beginColumn); jjtThis.setBeginLine(t.beginLine); }
}